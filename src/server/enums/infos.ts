/**
 * Enum Infos
 *
 * @copyright 2020-present Inrae
 * @author mario.adam@inrae.fr
 *
 */

export const enum EInfos {
    decodingPayload = "Decoding Payload",
    readConfig = "Read configuration",
    authOk = "Authorized access",
    disconnect = "Disconnect $1",
    create = "Create $1",
    streamFile = `Stream csv file $1 in database`,
    writeConfig = "Write configuration",
    startCreateDB = "Start create database",
    createDB = "Create database",
    createUser = "Create user",
    updateNb = "Create optimized column for pagination",
    csvFile = "csv file",
    classConstructor = "class $1 override $2",
    conWeb = "Connected to internet",
    key = "key",
    conn = "Connection",
    connectName = "connection name",
    constructor = "Constructor",
    logLevel = "Set log level",
    delTemp = "Delete temp table(s)",
    adminConnection = "Admin connection",
    accessServies = "Access service table",
    createServies = "Create service table",
    createFunc = "(re)create PostgresSql functions",
    UpdateCount = "Update count indexes",
    createServ = "Create Service",
    db = "dataBase",
    queryAfter = "Query after initialisation",
    dbExist = "Test database exist",
    dbReady = "Database $1 Ready",
    dbOnline = "Database $1 Online",
    dbPgConn = "Test PostgresSql connection",
    firstUser = "New user automatically create with fixed database name",
    foundConfig = "Found configuration table",
    host = "host name",
    least5Tool = "Must be at least 5 chars",
    listenPort = "Listening on port",
    loaded = "loaded",
    logFile = "active error to file",
    loginOk = "Login succeeded",
    logoutOk = "Logout succeeded",
    mailTool = "A valid email address",
    MultilinesNotSaved = "Multilines not saved in logs",
    newUser = "user to create",
    offLine = "Offline",
    onLine = "on line",
    pass = "password",
    passTool = "At least one number, one lowercase and one uppercase letter, at least six characters that are letters, numbers or the underscore",
    pg = "PostgresSql",
    port = "port",
    portTool = "Name must be have 4 numbers",
    rep = "repeat",
    repTool = "Same as password",
    serverListening = "Server listening on port",
    addServer = "Add to server",
    success = "successfull",
    tryCreate = "Try create $1",
    tunnel = "Tunneling to $1 established",
    updateUser = "update user => ",
    user = "username",
    ver = "version",
    noName = "No name",
    noDescription = "No description"
}
